generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Service {
  id                    String      @id @default(cuid())
  name                  String
  type                  String
  serviceType           String
  gaMeasurementId       String?
  gaPropertyId          String?
  adsCustomerId         String?
  apiKey                String?
  apiSecret             String?
  hasCredentials        Boolean     @default(false)
  verified              Boolean     @default(false)
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  searchConsoleProperty String?
  credential            Credential?
}

model Credential {
  id           String    @id @default(cuid())
  serviceId    String    @unique
  clientId     String?
  clientSecret String?
  redirectUri  String?
  clientEmail  String?
  privateKey   String?
  refreshToken String?
  accessToken  String?
  expiryDate   DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  service      Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  username      String    @unique
  password      String
  accounts      Account[]
  sessions      Session[]
  googleServices GoogleService[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AnalyticsData {
  id                   String   @id @default(cuid())
  date                 DateTime
  pageViews            Int
  events               String
  topPages             String
  users                String
  userAcquisition      String
  userBehavior         String
  topDomains           String
  topPagesViews        String
  worstPerformingPages String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model Settings {
  id                Int    @id @default(autoincrement())
  serviceAccountKey String
  gaViewId          String
  gscSiteUrl        String
}

model OAuthCredential {
  id           String  @id @default(cuid())
  clientId     String
  clientSecret String
  redirectUri  String
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model GoogleService {
  id               String   @id @default(cuid())
  userId           String
  serviceName      String
  serviceType      String
  gaPropertyId     String?
  isAuthenticated  Boolean  @default(false)
  // ... other fields ...

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}
